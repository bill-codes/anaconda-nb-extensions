#!/usr/bin/env python
import getpass
import os
import shutil
import subprocess
import sys
import tempfile

from os.path import join, exists, dirname

import IPython
import IPython.utils.io
import IPython.utils.path

from jupyter_core import paths

import logging
logger = logging.getLogger(__name__)

# WAKARI-specific
wakari_flag = os.environ.get('WAKARI_PROJECT_HOME')

# WAKARI-specific
# CHECK: Recently this function was refactored in the notebook, we should check
# if this is still valid as is...
def _copy_metadata(src, dst):
    """IPython uses this to copy metadata (perms) from
    src to dst.  However when new notebooks are created,
    dst does not exist.  When new notebooks are created
    usually this function fails, and src is renamed to
    dst. So what we do is make a tempfile, which will
    have the inherited ACLs, and then copy those to
    both the source and the dst.
    """
    base = dirname(dst)
    path = tempfile.NamedTemporaryFile(dir=base).name
    try:
        with open(path, "w+") as f:
            try:
                shutil.copymode(path, src)
            except:
                pass
            try:
                shutil.copymode(path, dst)
            except:
                pass
        st = os.stat(src)
        if hasattr(os, 'chflags') and hasattr(st, 'st_flags'):
            os.chflags(dst, st.st_flags)
    finally:
        os.remove(path)

if wakari_flag:
    IPython.utils.io._copy_metadata = _copy_metadata

# WAKARI-specific
# CHECK: We should check if this is still valid as the notebook
old_ensure_dir_exists = IPython.utils.path.ensure_dir_exists

def ensure_dir_exists(path, mode=None):
    if mode:
        logger.error("we don't allow you to pass a mode for ensure_dir_exists, as it conflicts with ACLs")
    return old_ensure_dir_exists(path, mode=0o777)

if wakari_flag:
    IPython.utils.path.ensure_dir_exists = ensure_dir_exists

# Let's start
args = sys.argv

# we pass "notebook" as first argument, so you can trigger the notebook just
# with "anaconda-notebook"
if len(args) == 1:
    args = ["notebook"]
else:
    args = ["notebook"] + args[1:]

# Setup jupyter_config_dir

if wakari_flag:
    base_dir = wakari_flag # 'WAKARI_PROJECT_HOME'
    # Wakari run on linux boxes so it is safe to look for this locations
    jupyter_config_dir = join(base_dir, '.jupyter_%s' % getpass.getuser())
    jupyter_data_dir = join(base_dir, '.local', 'share',  'jupyter_%s' % getpass.getuser())
else:
    # Install extensions on the environment
    jupyter_config_dir = paths.ENV_CONFIG_PATH[0]
    jupyter_data_dir = paths.ENV_JUPYTER_PATH[0]

if not exists(jupyter_config_dir):
    os.makedirs(jupyter_config_dir)
if not exists(join(jupyter_config_dir, 'custom')):
    os.makedirs(join(jupyter_config_dir, 'custom'))
if not exists(jupyter_data_dir):
    os.makedirs(jupyter_data_dir)

# Keep open the posibilty to point to other config locations
os.environ['JUPYTER_CONFIG_DIR'] = jupyter_config_dir
os.environ['JUPYTER_DATA_DIR'] = jupyter_data_dir

# Look for files copied from source (by the recipe) into the environment
source_config_dir = join(dirname(dirname(__file__)), 
                        'etc',
                        'anaconda_notebook',
                        'jupyter_config_dir')
source_data_dir = join(dirname(dirname(__file__)),
                      'share',
                      'anaconda_notebook',
                      'jupyter_data_dir')

# Our own copytree...
def copytree(src, dst, is_file=False):
    if not is_file:
        if exists(dst):
            shutil.rmtree(dst)
        return shutil.copytree(src, dst)
    else:
        if exists(dst):
            os.remove(dst)
        return shutil.copyfile(src, dst)

# Copy jupyter config files

#TODO: use config manager to load the extension...
copytree(join(source_config_dir, 'custom', 'custom.js'),
         join(jupyter_config_dir, 'custom', 'custom.js'),
         is_file=True
)

config_files = ['jupyter_notebook_config.py']

for config_file in config_files:
    copytree(join(source_config_dir, config_file),
             join(jupyter_config_dir, config_file),
             is_file=True
    )

# Copy jupyter data files
nbextensions = ['defaulter',
                'locker',
                'rcm',
                'syncer',
                'utils']

for nbextension in nbextensions:
    copytree(join(source_data_dir, 'nbextensions', nbextension),
             join(jupyter_data_dir, 'nbextensions', nbextension))

## run the syncer
cmd = [sys.executable,
       join(jupyter_data_dir, 'nbextensions', 'syncer', 'sync.py'),
       '-p',
       join(jupyter_data_dir, 'kernels')]
subprocess.check_call(cmd)
IPython.start_ipython(argv=args)
